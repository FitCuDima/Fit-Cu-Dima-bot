import telebot
from telebot import types
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

user_data = {}

# Команда /start → выбор языка
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Română 🇷🇴", "English 🇬🇧", "Русский 🇷🇺")
    bot.send_message(message.chat.id, "Alege limba / Choose your language / Выберите язык:", reply_markup=markup)

# Сохранение языка
@bot.message_handler(func=lambda msg: msg.text in ["Română 🇷🇴", "English 🇬🇧", "Русский 🇷🇺"])
def choose_language(message):
    lang = message.text[:2]
    chat_id = message.chat.id
    user_data[chat_id] = {"lang": lang}

    if lang == "Ro":
        bot.send_message(chat_id, "Care este obiectivul tău?", reply_markup=goals_ro())
    elif lang == "En":
        bot.send_message(chat_id, "What is your fitness goal?", reply_markup=goals_en())
    else:
        bot.send_message(chat_id, "Какая у тебя цель?", reply_markup=goals_ru())

# Кнопки целей
def goals_ro():
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.add("Vreau să slăbesc 🔥", "Vreau să mă tonifiez 💃", "Vreau masă musculară 🏆", "Vreau să merg la sală 🏋️")
    return m

def goals_en():
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.add("I want to lose weight 🔥", "I want to tone 💃", "I want muscle mass 🏆", "I go to the gym 🏋️")
    return m

def goals_ru():
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.add("Хочу похудеть 🔥", "Хочу подтянуться 💃", "Хочу набрать массу 🏆", "Хожу в зал 🏋️")
    return m

# Сохраняем цель и переходим к возрасту
@bot.message_handler(func=lambda msg: any(x in msg.text for x in ["Vreau", "I want", "Хочу"]))
def handle_goal(message):
    chat_id = message.chat.id
    user_data[chat_id]["goal"] = message.text
    ask_age(chat_id)

# Спрашиваем возраст
def ask_age(chat_id):
    lang = user_data[chat_id]["lang"]
    txt = {
        "Ro": "Ce vârstă ai?",
        "En": "How old are you?",
        "Ru": "Сколько тебе лет?"
    }
    bot.send_message(chat_id, txt[lang])

@bot.message_handler(func=lambda msg: msg.text.isdigit() and len(msg.text) < 3)
def save_age(message):
    chat_id = message.chat.id
    user_data[chat_id]["age"] = int(message.text)
    ask_height(chat_id)

def ask_height(chat_id):
    txt = {
        "Ro": "Ce înălțime ai? (în cm)",
        "En": "What is your height? (in cm)",
        "Ru": "Какой у тебя рост? (в см)"
    }
    bot.send_message(chat_id, txt[user_data[chat_id]["lang"]])

@bot.message_handler(func=lambda msg: msg.text.isdigit() and 100 <= int(msg.text) <= 250)
def save_height(message):
    chat_id = message.chat.id
    user_data[chat_id]["height"] = int(message.text)
    ask_weight(chat_id)

def ask_weight(chat_id):
    txt = {
        "Ro": "Cât cântărești? (kg)",
        "En": "What is your weight? (kg)",
        "Ru": "Сколько ты весишь? (в кг)"
    }
    bot.send_message(chat_id, txt[user_data[chat_id]["lang"]])

@bot.message_handler(func=lambda msg: msg.text.isdigit() and 30 <= int(msg.text) <= 200)
def save_weight(message):
    chat_id = message.chat.id
    user_data[chat_id]["weight"] = int(message.text)
    ask_gender(chat_id)

def ask_gender(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Masculin / Male / Мужской", "Feminin / Female / Женский")
    bot.send_message(chat_id, "Sex / Gender / Пол:", reply_markup=markup)

@bot.message_handler(func=lambda msg: any(x in msg.text for x in ["Masculin", "Male", "Жен", "Feminin"]))
def save_gender(message):
    chat_id = message.chat.id
    user_data[chat_id]["gender"] = message.text
    ask_level(chat_id)

def ask_level(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Începător / Beginner", "Intermediar / Intermediate", "Avansat / Advanced")
    bot.send_message(chat_id, "Nivelul tău de experiență / Your fitness level / Уровень подготовки:", reply_markup=markup)

@bot.message_handler(func=lambda msg: any(x in msg.text for x in ["Începător", "Beginner", "Intermediar", "Avansat", "Intermediate", "Advanced"]))
def save_level(message):
    chat_id = message.chat.id
    user_data[chat_id]["level"] = message.text
    ask_plan_length(chat_id)

def ask_plan_length(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("1 antrenament", "3 antrenamente", "10 antrenamente")
    bot.send_message(chat_id, "Pentru câte antrenamente vrei planul? / How many workouts do you want? / Сколько тренировок тебе нужно?", reply_markup=markup)

@bot.message_handler(func=lambda msg: any(x in msg.text for x in ["antrenament", "трениров", "workout"]))
def generate_plan(message):
    chat_id = message.chat.id
    user_data[chat_id]["plan_length"] = message.text

    # ⏳ Здесь позже подключим генерацию плана из базы
    bot.send_message(chat_id, "📦 Planul tău este în curs de generare...\n🕐 Te rog să aștepți câteva secunde.")
    bot.send_message(chat_id, "⚠️ Antrenamentele vor fi disponibile în curând pe baza datelor tale. Mulțumim!")

# Стартуем бота
bot.polling(none_stop=True)